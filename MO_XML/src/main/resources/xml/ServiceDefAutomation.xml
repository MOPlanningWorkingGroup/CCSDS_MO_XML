<?xml version="1.0" encoding="UTF-8"?>
<mal:specification xmlns:com="http://www.ccsds.org/schema/COMSchema"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xmlns:mal="http://www.ccsds.org/schema/ServiceSchema">
  <mal:area name="Automation" number="7" version="3"
            comment="This section details the automation services. Both the services and structures are defined in terms of the MO MAL, which is defined in Message Abstraction Layer, Recommended Standard (Blue Book), CCSDS 521.0-B-2, so it is possible to deploy them over any supported protocol and message transport.&#xA;The services defined here are also specified in terms of the COM, which is defined in Mission Operations Common Object Model, Recommended Standard (Blue Book), CCSDS 521.1-B-1.&#xA;All service specifications in this document are part of the Automation area, which has a short form number of '7'.">
    <mal:service xsi:type="com:ExtendedServiceType" name="Schedule" number="1"
                 comment="The schedule service has three main functions: distribute schedules, control schedule execution, and report schedule status. The schedule service allows consumers to submit schedules and schedule fragments, control schedule execution and to subsequently monitor the status changes of the submitted and executing schedules.
				 &#xA;A schedule is submitted to the provider using the submitSchedule operation, the progress of which may optionally be monitored using the COM activity tracking pattern, which completes when the schedule has been delivered to the provider. The use of the COM activity tracking pattern is deployment specific. The usage pattern of the COM activity tracking is similar to the submitAction operation in the M&amp;C Action service.
				 &#xA;The consumer is responsible for creating and archiving the schedule instance object and then using the submitSchedule operation to submit it to the schedule service provider.
				 &#xA;The schedule status consists of a set of fields. The fields are related to schedule life cycle states (submitted, started, etc). The schedule life cycle is not part of the specification.
				 &#xA;Consumer may subscribe to the monitoring of schedule instances. The notifications contain the schedule status objects.">
      <mal:documentation name="High Level Requirements" order="1">The schedule service shall provide:
&lt;ol&gt;
 &lt;li&gt;the capability for submitting schedules;&lt;/li&gt;
 &lt;li&gt;the capability for getting, updating and removing already submitted schedules;&lt;/li&gt;
 &lt;li&gt;the capability for submitting schedule increments (fragments) for making a batch of changes to the schedule;&lt;/li&gt;
 &lt;li&gt;the capability for getting a schedule status;&lt;/li&gt;
 &lt;li&gt;the capability for monitoring schedule status;&lt;/li&gt;
 &lt;li&gt;the capability for listing the numeric identifiers for the schedule definitions;&lt;/li&gt;
 &lt;li&gt;the capability for defining a new schedule definition;&lt;/li&gt;
 &lt;li&gt;the capability for getting, updating and removing an existing schedule definition;&lt;/li&gt;
 &lt;li&gt;the capability for controlling a schedule execution.&lt;/li&gt;
&lt;/ol&gt;
        The list of schedule types that are supported by the schedule service shall be declared when deploying that service.
        The schedule service may use the COM Activity Tracking service to report the delivery of a submitted schedules.
      </mal:documentation>
<!--       <mal:documentation name="Functional Requirements" order="2"> -->
<!--       </mal:documentation> -->
      <mal:capabilitySet number="1" comment="Submit and get schedule instance">
	  <!-- submitSchedule -->
      <mal:requestIP name="submitSchedule" number="1" supportInReplay="false"
                      comment="The submitSchedule operation allows a consumer to submit a schedule instance to a provider.">
          <mal:messages>
            <mal:request>
              <mal:field name="schDetails"
                         comment="The schDetails part of the submission shall contain the information of the schedule instance.&#xA;The operation shall return once the schedule has been accepted by the provider.">
                <mal:type list="true" name="ScheduleInstanceDetails" service="Schedule" area="Automation"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="schStatus"
                         comment="The operation shall return a ScheduleStatusDetails object. The status object contains the ids of the submitted schedules. Possible errors are returned using the ERROR states in the status object (may use multiple ERROR states).">
                <mal:type list="true" name="ScheduleStatusDetails" service="Schedule" area="Automation"/>
              </mal:field>
            </mal:response>
          </mal:messages>
        </mal:requestIP>
		<!-- getSchedule -->
        <mal:requestIP name="getSchedule" number="2" supportInReplay="false"
                      comment="The getSchedule operation allows a consumer to get a schedule instance from the provider. The schedule instance may have been modified after the initial submission, and contains the current data, and not necessarily the data that was initially submitted.">
          <mal:messages>
            <mal:request>
              <mal:field name="schInstId"
                         comment="The schInstId field of the submission shall contain a MAL::Long that is the object instance identifier of the ScheduleInstance that is going to be returned.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="schDetails"
                         comment="The operation shall return ScheduleInstanceDetails objects. If schInstId does not exist, then no object is returned.">
                <mal:type list="true" name="ScheduleInstanceDetails" service="Schedule" area="Automation"/>
              </mal:field>
            </mal:response>
          </mal:messages>
        </mal:requestIP>
      </mal:capabilitySet>
      <mal:capabilitySet number="2" comment="Update and remove schedule instance">
	  <!-- updateSchedule -->
      <mal:requestIP name="updateSchedule" number="3" supportInReplay="false"
                      comment="The updateSchedule operation allows a consumer to update a schedule by essentially replacing it. The difference between updateSchedule() and calling removeSchedule() + submitSchedule() is that in the latter case the ID of the schedule will change. The difference between updateSchedule() and patchSchedul() is that updateSchedule() will replace the whole schedule, while patchSchedule() will replace parts of a schedule.">
          <mal:messages>
            <mal:request>
              <mal:field name="schDetails"
                         comment="The schDetails part of the submission shall contain the information of the updated schedule instance. The schDetails instance will become the schedule instance on the provider referenced by schInstId.&#xA;The operation shall return once the schedule has been accepted by the provider.">
                <mal:type list="true" name="ScheduleInstanceDetails" service="Schedule" area="Automation"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="schStatus"
                         comment="The operation shall return a ScheduleStatusDetails object. The status reflects the changes done by this operation. Possible errors are returned using the ERROR states in the status object (may use multiple ERROR states).">
                <mal:type list="true" name="ScheduleStatusDetails" service="Schedule" area="Automation"/>
              </mal:field>
            </mal:response>
          </mal:messages>
        </mal:requestIP>
	  <!-- removeSchedule -->
      <mal:requestIP name="removeSchedule" number="4" supportInReplay="false"
                      comment="The removeSchedule operation allows a consumer to remove an already submitted schedule.">
          <mal:messages>
            <mal:request>
              <mal:field name="schInstId"
                         comment="The schInstId field of the submission shall contain a MAL::Long that is the object instance identifier of the ScheduleInstance that is going to be removed.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="schStatus"
                         comment="The operation shall return a ScheduleStatusDetails object. The status reflects the changes done by this operation. Possible errors are returned using the ERROR states in the status object (may use multiple ERROR states).">
                <mal:type list="true" name="ScheduleStatusDetails" service="Schedule" area="Automation"/>
              </mal:field>
            </mal:response>
          </mal:messages>
        </mal:requestIP>
      </mal:capabilitySet>
      <mal:capabilitySet number="3" comment="Submit a fragment (patch) schedule updates for a merge onto target schedule">
	  <!-- submitScheduleIncrement -->
      <mal:requestIP name="submitScheduleIncrement" number="5" supportInReplay="false"
                      comment="The submitScheduleIncrement operation allows a consumer to submit schedule increments (or fragments) to be merged into or removed from the target schedule. Schedule increment contains only the changes to be applied to target schedule. This differs from updateSchedule, which essentially replaces a schedule. The schedule increment uses the same data structure (ScheduleInstanceDetails) as the submitSchedule operation. submitScheduleIncrement is a separate operation from submitSchedule for the capability set reasons - not all providers may wish to implement it. Otherwise the submitScheduleIncrement and submitSchedule may belong to one operation, since they have the same input/output messages (ie method signature).
&#xA;The schedule increment is distinguished from a standalone schedule by the 'scheduleType' field, which is an enumeration of type ScheduleType. The standalone schedule has scheduleType=STANDALONE. The increments are INCREMENT_ADD and INCREMENT_REMOVE. The target schedule for applying the increments is contained in the ScheduleInstanceDetails.id field.
&#xA;If the schedule fragment type is INCREMENT_ADD, then all fields from the fragment ScheduleInstanceDetails will be added to the target schedule. Primitive fields such as 'comment' will be replaced with the value specified in the increment schedule. Primitive fields of null value in the fragment schedule are ignored. List items (argumentValues, timingConstraints, scheduleItems) will be added from the fragment schedule to the target schedule.
&#xA;If the schedule fragment type is INCREMENT_REMOVE, then all fields from the fragment ScheduleInstanceDetails will be removed from the target schedule. If a primitive field is null in a fragment, then it is ignored. If a primitive field is not null in a fragment (for example, containing 'set to null' or 'delete', or '0' - whatever, depending on the data type), then it will be set to null in the target schedule. If 'argumentValues' is not null in a fragment, then corresponding list item ArgumentValue will be removed, matched by ArgumentValue.argDefName field and ArgumentValue.value field, if there are multiple argDefName references. If 'timingConstraints' is not null in a fragment, then corresponding list item TimingDetails will be removed, matched by TimingDetails.triggerName field. If 'scheduleItems' is not null in fragment, then corresponding list item ScheduleItemInstanceDetails will be removed, matched by ScheduleItemInstanceDetails.id field. For the removals it is only necessary to specify the indexing field of a structure, ie ScheduleItemInstanceDetails.id, as explained above, other fields are ignored.">
          <mal:messages>
			<mal:request>
              <mal:field name="schIncrementDetails"
                         comment="The schIncrementDetails part of the submission shall contain the information of the schedule increment.&#xA;The operation shall return once the schedule increment has been accepted by the provider.">
                <mal:type list="true" name="ScheduleInstanceDetails" service="Schedule" area="Automation"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="schStatus"
                         comment="The operation shall return ScheduleStatusDetails objects for the merged schedules. The status of merged schedules is LAST_MODIFIED. Possible errors are returned using the ERROR states in the status object (may use multiple ERROR states).">
                <mal:type list="true" name="ScheduleStatusDetails" service="Schedule" area="Automation"/>
              </mal:field>
            </mal:response>
          </mal:messages>
        </mal:requestIP>
      </mal:capabilitySet>
      <mal:capabilitySet number="4" comment="Get schedule status">
	  <!-- getScheduleStatus -->
        <mal:requestIP name="getScheduleStatus" number="6" supportInReplay="true"
                       comment="The getScheduleStatus operation allows a consumer to get a schedule status.">
          <mal:messages>
            <mal:request>
              <mal:field name="schIds"
                         comment="The schIds field shall contain a list of schedule ids to retrieve the schedule statuses for.&#xA;The request may contain the wildcard value of '0' to return statuses for all submitted schedules.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="schStatus"
                         comment="The operation shall return ScheduleStatusDetails objects. The order of the schedule status objects corresponds to the order of the submitted schedule instance ids. If a schedule instance id does not exist, then the corresponding schedule status object is null.">
                <mal:type list="true" name="ScheduleStatusDetails" service="Schedule" area="Automation"/>
              </mal:field>
            </mal:response>
          </mal:messages>
        </mal:requestIP>
      </mal:capabilitySet>
      <mal:capabilitySet number="5" comment="Monitor schedule status">
	  <!-- monitorSchedules -->
		<mal:pubsubIP name="monitorSchedules" number="7" supportInReplay="true"
                      comment="The monitorSchedules operation allows a consumer to subscribe for schedule status updates.&#xA;How to specify the schedule ids that we wish to monitor? This problem is not solved in this specification. The problem is similar to the MC Parameter service. In MC Parameter service there is a general monitorValue operation, that takes no arguments. A related enableGeneration operation specifies the instance ids or groups of instances for which the updates are generated. Alternatively, there is a generationEnabled field in ParameterDefinitionDetails.&#xA;The notifications contain the schedule status objects. The amount of information in the status objects is defined by deployments. For example, some system may send the current state constant of a schedule (eg EXECUTED), others may send multiple constants with associated time-stamps (eg SUBMITTED, LAST_MODIFIED, EXECUTED).">
          <mal:messages>
            <mal:publishNotify>
              <mal:field name="objId"
                         comment="The MAL EntityKey.firstSubKey shall contain the schedule name.&#xA;The MAL EntityKey.secondSubKey shall contain the ScheduleDefinition object instance identifier.&#xA;The MAL EntityKey.thirdSubKey shall contain the ScheduleInstance object instance identifier.&#xA;The MAL EntityKey.fourthSubKey shall be NULL.&#xA;The timestamp of the ScheduleInstance update shall be taken from the publish message.&#xA;The publish message shall include the ObjectId of the source link of the update.&#xA;If no source link is needed then the ObjectId shall be replaced with a NULL.">
                <mal:type name="ObjectId" area="COM"/>
              </mal:field>
              <mal:field name="status"
                         comment="The second part of the publish message shall be the ScheduleInstance object value.">
                <mal:type name="ScheduleStatusDetails" service="Schedule" area="Automation"/>
              </mal:field>
            </mal:publishNotify>
          </mal:messages>
        </mal:pubsubIP>
      </mal:capabilitySet>
      <mal:capabilitySet number="6" comment="Control schedule execution">
	  <!-- start -->
      <mal:requestIP name="start" number="8" supportInReplay="false"
                      comment="The start operation allows a consumer to start executing a submitted or a paused schedule.">
          <mal:messages>
            <mal:request>
              <mal:field name="schInstId"
                         comment="The schInstId field of the submission shall contain a MAL::Long that is the object instance identifier of the ScheduleInstance to be started.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="schStatus"
                         comment="The operation shall return a ScheduleStatusDetails object. If id does not exist, then use the INVALID status constant. Other possible statuses: EXECUTE_STARTED, EXECUTE_START_FAILED.">
                <mal:type list="true" name="ScheduleStatusDetails" service="Schedule" area="Automation"/>
              </mal:field>
            </mal:response>
          </mal:messages>
        </mal:requestIP>
	  <!-- pause -->
      <mal:requestIP name="pause" number="9" supportInReplay="false"
                      comment="The pause operation allows a consumer to pause an executing schedule.">
          <mal:messages>
            <mal:request>
              <mal:field name="schInstId"
                         comment="The schInstId field of the submission shall contain a MAL::Long that is the object instance identifier of the ScheduleInstance to be paused.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="schStatus"
                         comment="The operation shall return a ScheduleStatusDetails object. If id does not exist, then use the INVALID status constant. Other possible statuses: EXECUTE_PAUSED, EXECUTE_PAUSE_FAILED.">
                <mal:type list="true" name="ScheduleStatusDetails" service="Schedule" area="Automation"/>
              </mal:field>
            </mal:response>
          </mal:messages>
        </mal:requestIP>
	  <!-- resume -->
      <mal:requestIP name="resume" number="10" supportInReplay="false"
                      comment="The resume operation allows a consumer to resume a paused schedule.">
          <mal:messages>
            <mal:request>
              <mal:field name="schInstId"
                         comment="The schInstId field of the submission shall contain a MAL::Long that is the object instance identifier of the ScheduleInstance to be resumed.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="schStatus"
                         comment="The operation shall return a ScheduleStatusDetails object. If id does not exist, then use the INVALID status constant. Other possible statuses: EXECUTE_RESUMED, EXECUTE_RESUME_FAILED.">
                <mal:type list="true" name="ScheduleStatusDetails" service="Schedule" area="Automation"/>
              </mal:field>
            </mal:response>
          </mal:messages>
        </mal:requestIP>
	  <!-- terminate -->
      <mal:requestIP name="terminate" number="11" supportInReplay="false"
                      comment="The terminate operation allows a consumer to terminate a running or paused schedule.">
          <mal:messages>
            <mal:request>
              <mal:field name="schInstId"
                         comment="The schInstId field of the submission shall contain a MAL::Long that is the object instance identifier of the ScheduleInstance to be terminated.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="schStatus"
                         comment="The operation shall return a ScheduleStatusDetails object. If id does not exist, then use the INVALID status constant. Other possible statuses: EXECUTE_TERMINATED, EXECUTE_TERMINATE_FAILED.">
                <mal:type list="true" name="ScheduleStatusDetails" service="Schedule" area="Automation"/>
              </mal:field>
            </mal:response>
          </mal:messages>
        </mal:requestIP>
      </mal:capabilitySet>
      <mal:capabilitySet number="7" comment="List schedule definition">
	  <!-- listDefinition -->
          <mal:requestIP name="listDefinition" number="12" supportInReplay="true"
                       comment="The listDefinition operation allows a consumer to request the object instance identifiers of the ScheduleDefinition objects for the supported types of schedule of the provider. The operation is expected to be used in conjunction with the COM archive which holds the actual ScheduleDefinition objects. If the schedule name does not exist the corresponding definition id is not returned and no error is reported.">
          <mal:messages>
            <mal:request>
              <mal:field name="schNames"
                         comment="The schNames field shall contain a list of schedule definition names to retrieve the ScheduleDefinition object instance identifiers for.&#xA;The request may contain the wildcard value of '*' to return all supported ScheduleDefinition objects.">
                <mal:type list="true" name="Identifier" area="MAL"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="schDefInstIds"
                         comment="The response shall contain a list of matching ScheduleDefinition object instance ids.&#xA;The returned list shall maintain the same order as the submitted list unless the wildcard value was included in the request.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:field>
            </mal:response>
          </mal:messages>
        </mal:requestIP>
		<!-- getDefinition -->
        <mal:requestIP name="getDefinition" number="13" supportInReplay="true"
                       comment="The getDefinition operation allows a consumer to request the definition objects for the supported types of schedules on the provider. If the id does not exist the corresponding definition object is not returned and no error is reported.">
          <mal:messages>
            <mal:request>
              <mal:field name="defIds" canBeNull="true"
                         comment="The defIds field shall contain a list of schedule definition ids.&#xA;If null then returns all schedule definitions.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="schDefInst"
                         comment="The response shall contain a list of matching ScheduleDefinition object instances.&#xA;The returned list shall maintain the same order as the submitted list unless defIds={0}in the request.">
                <mal:type list="true" name="ScheduleDefinitionDetails" service="Schedule" area="Automation"/>
              </mal:field>
            </mal:response>
          </mal:messages>
        </mal:requestIP>
      </mal:capabilitySet>
      <mal:capabilitySet number="8" comment="Add, update, remove schedule definition">
		<!-- addDefinition -->
        <mal:requestIP name="addDefinition" number="14" supportInReplay="false"
                       comment="The addDefinition operation allows a consumer to define one or more schedule types that do not currently exist. The new ScheduleDefinition object is expected to be stored in the COM archive by the provider of the schedule service.">
          <mal:messages>
            <mal:request>
              <mal:field name="schDefDetails"
                         comment="The schDefDetails field shall hold the list of definitions to be added.&#xA;The name field of the supplied ScheduleDefinitionDetails structures must not be NULL, the wildcard '*', or empty (an INVALID error shall be returned in this case).&#xA;The supplied name must be unique among all ScheduleDefinition objects for the domain of the provider otherwise a DUPLICATE error shall be raised.&#xA;If an error is raised then no new definitions shall be added as a result of this operation call.">
                <mal:type list="true" name="ScheduleDefinitionDetails" service="Schedule" area="Automation"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="schDefInstIds"
                         comment="The response shall contain the list of object instance identifiers for the new definitions.&#xA;The returned list shall maintain the same order as the submitted definitions.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One of the supplied schedule definitions contains an invalid schedule name.">
              <mal:type name="INVALID" area="COM"/>
              <mal:extraInformation comment="The extra information field contains a list of erroneous ids from the originating list supplied.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="One or more of the schedule definitions being added has supplied a schedule name that is already in use in the domain.">
              <mal:type name="DUPLICATE" area="COM"/>
              <mal:extraInformation comment="The extra information field contains a list of erroneous ids from the originating list supplied.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>
		<!-- updateDefinition -->
        <mal:submitIP name="updateDefinition" number="15" supportInReplay="false"
                      comment="The updateDefinition operation allows a consumer to modify a definition for one or more schedules without needing to delete the existing definition first.&#xA;This differs from deleting an existing definition and adding a new definition with the same schedule name in the fact that the object instance identifier of the definition being modified is not changed therefore the operation is only expected to be used for minor modifications such as descriptions.&#xA;The operation must not be used to change the name of an existing schedule definition, removal of the existing definition and adding the new definition must be used in this case.&#xA;The replacement definition should be stored in the COM archive by the service provider.">
          <mal:messages>
            <mal:submit>
              <mal:field name="schDefDetails"
                         comment="The schDefDetails field shall contain the list of replacement details for the matched ScheduleDefinition objects. The id of definition is in schDefDetails.&#xA;Only the description or the unit fields of the arguments shall be permitted to be changed. Any other modification shall cause an INVALID error to be returned.&#xA;If an error is raised then no definitions shall be modified as a result of this operation call.">
                <mal:type list="true" name="ScheduleDefinitionDetails" service="Schedule" area="Automation"/>
              </mal:field>
            </mal:submit>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One of the supplied schedule definitions is trying to change its schedule definition name or id.">
              <mal:type name="INVALID" area="COM"/>
              <mal:extraInformation comment="The extra information field contains a list of erroneous ids from the originating list supplied.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="One of the supplied ScheduleDefinition object instance ids is unknown.">
              <mal:type name="UNKNOWN" area="MAL"/>
              <mal:extraInformation comment="The extra information field contains a list of erroneous ids from the originating list supplied.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:submitIP>
		<!-- removeDefinition -->
        <mal:submitIP name="removeDefinition" number="16" supportInReplay="false"
                      comment="The removeDefinition operation allows a consumer to remove one or more definitions from the list of schedule types supported by the schedule provider.&#xA;The operation does not remove the ScheduleDefinition object from the COM archive, merely removes the object from the provider. This permits active, and completed, ScheduleInstance objects to continue to reference the correct ScheduleDefinition object in the COM archive.">
          <mal:messages>
            <mal:submit>
              <mal:field name="schDefInstIds"
                         comment="The schDefInstIds field holds the list of ScheduleDefinition object instance identifiers of the definitions to be removed from the provider.&#xA;The wildcard value of '0' in the list of object instance identifiers shall be supported and matches all definitions of the provider.&#xA;If a provided definition object instance identifier does not include a wildcard and does not match an existing definition then this operation shall fail with an UNKNOWN error.&#xA;If a matched definition is still being used by an active schedule instance then this operation shall not fail because of this reason.&#xA;Removed definitions still exist in the COM archive but shall not be allowed to be referenced by new schedule instances.&#xA;If an error is raised then no definitions shall be removed as a result of this operation call.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:field>
            </mal:submit>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One of the supplied ScheduleDefinition object instance ids is unknown.">
              <mal:type name="UNKNOWN" area="MAL"/>
              <mal:extraInformation comment="The extra information field contains a list of erroneous ids from the originating list supplied.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:submitIP>
      </mal:capabilitySet>
      <mal:dataTypes>
		<!-- ScheduleDefinitionDetails -->
        <mal:composite name="ScheduleDefinitionDetails" shortFormPart="1"
                       comment="The ScheduleDefinitionDetails structure holds the definition information of a schedule.">
          <mal:extends>
            <mal:type name="Composite" area="MAL"/>
          </mal:extends>
          <mal:field name="id" canBeNull="true"
                     comment="The unique id of the schedule definition. This id is also used by the COM Archive. The id may be null in the initial submission, in case the provider populates the id field.">
            <mal:type name="Long" area="MAL"/>
          </mal:field>
          <mal:field name="name" canBeNull="false"
                     comment="The unique name of the schedule definition. Must not be empty or the wildcard value.">
            <mal:type name="Identifier" area="MAL"/>
          </mal:field>
          <mal:field name="description" canBeNull="false"
					comment="The description of the schedule definition.">
            <mal:type name="String" area="MAL"/>
          </mal:field>
          <mal:field name="argumentDefs" canBeNull="true"
                     comment="Definitions of schedule arguments.">
            <mal:type list="true" name="ArgumentDefinitionDetails" area="PlanningDataTypes"/>
          </mal:field>
          <mal:field name="eventTypes" canBeNull="true"
                     comment="Types of permitted events for this schedule. The event is a COM object. The events are not standardized as part of the schedule service.">
            <mal:type list="true" name="ObjectType" area="COM"/>
          </mal:field>
        </mal:composite>
		<!-- ScheduleInstanceDetails -->
        <mal:composite name="ScheduleInstanceDetails" shortFormPart="2"
                       comment="The ScheduleInstanceDetails structure holds the information required for an instance of a schedule such as the argument values to use.">
          <mal:extends>
            <mal:type name="Composite" area="MAL"/>
          </mal:extends>
          <mal:field name="id" canBeNull="true"
                     comment="The unique id of the schedule instance. This id is also used by the COM Archive. The id may be null in the initial submission, in case the provider populates the id field.">
            <mal:type name="Long" area="MAL"/>
          </mal:field>
          <mal:field name="schDefId" canBeNull="false"
                     comment="Reference to the schedule definition.">
            <mal:type name="Long" area="MAL"/>
          </mal:field>
          <mal:field name="scheduleType" canBeNull="true"
                     comment="The type of schedule: standolone or increment. If null then the type is ScheduleType.STANDALONE.">
            <mal:type name="ScheduleType" service="Schedule" area="Automation"/>
          </mal:field>
          <mal:field name="comment" canBeNull="false"
					comment="Comment for the schedule instance.">
            <mal:type name="String" area="MAL"/>
          </mal:field>
          <mal:field name="argumentValues" canBeNull="true"
                     comment="The argument values.">
            <mal:type list="true" name="ArgumentValue" area="PlanningDataTypes"/>
          </mal:field>
          <mal:field name="timingConstraints" canBeNull="true"
                     comment="Synchronization constraints for the schedule.">
            <mal:type list="true" name="TimingDetails" area="PlanningDataTypes"/>
          </mal:field>
          <mal:field name="scheduleItems" canBeNull="true"
                     comment="The schedule items.">
            <mal:type list="true" name="ScheduleItemInstanceDetails" service="Schedule" area="Automation"/>
          </mal:field>
        </mal:composite>
		<!-- ScheduleItemInstanceDetails -->
        <mal:composite name="ScheduleItemInstanceDetails" shortFormPart="3"
                       comment="The ScheduleItemInstanceDetails structure holds the information required for an instance of a schedule item. The schedule item is a wrapper for an action, procedure or another schedule.">
          <mal:extends>
            <mal:type name="Composite" area="MAL"/>
          </mal:extends>
          <mal:field name="id" canBeNull="false"
                     comment="The unique id of the schedule instance.">
            <mal:type name="Long" area="MAL"/>
          </mal:field>
          <mal:field name="schInstId" canBeNull="false"
                     comment="Reference to the enclosing schedule instance.">
            <mal:type name="Long" area="MAL"/>
          </mal:field>
          <mal:field name="argumentTypes" canBeNull="true"
                     comment="The argument types of argument values for the delegate item.">
            <mal:type list="true" name="ArgumentDefinitionDetails" area="PlanningDataTypes"/>
          </mal:field>
          <mal:field name="argumentValues" canBeNull="true"
                     comment="The argument values for the delegate item.">
            <mal:type list="true" name="ArgumentValue" area="PlanningDataTypes"/>
          </mal:field>
          <mal:field name="timingConstraints" canBeNull="false"
                     comment="Synchronization constraints for the schedule item.">
            <mal:type list="true" name="TimingDetails" area="PlanningDataTypes"/>
          </mal:field>
          <mal:field name="delegateItem" canBeNull="true"
                     comment="The type and instance of the associated activity or action this schedule item wraps.">
            <mal:type name="ObjectId" area="COM"/>
          </mal:field>
        </mal:composite>
		<!-- ScheduleStatusDetails -->
        <mal:composite name="ScheduleStatusDetails" shortFormPart="4"
                       comment="The ScheduleStatusDetails structure holds the information related to the schedule status. The schedule status consists of as set of fields, related to a typical schedule life cycle. The schedule life cycle is not part of the standard.">
          <mal:extends>
            <mal:type name="Composite" area="MAL"/>
          </mal:extends>
          <mal:field name="schInstId" canBeNull="false"
                     comment="Reference to the schedule instance associated with this schedule status.">
            <mal:type name="Long" area="MAL"/>
          </mal:field>
          <mal:field name="status" canBeNull="true"
                     comment="Contains the schedule status details objects, eg SUBMITTED, EXECUTE_STARTED.">
            <mal:type list="true" name="StatusRecord" area="PlanningDataTypes"/>
          </mal:field>
          <mal:field name="scheduleItemStatuses" canBeNull="true"
					comment="Contains the schedule item status objects, in the order of the schedule items in the schedule.">
            <mal:type list="true" name="ScheduleItemStatusDetails" service="Schedule" area="Automation"/>
          </mal:field>
        </mal:composite>
		<!-- ScheduleItemStatusDetails -->
        <mal:composite name="ScheduleItemStatusDetails" shortFormPart="5"
                       comment="The ScheduleItemStatusDetails structure holds the information related to the schedule item status. The schedule item status consists of as set of fields.">
          <mal:extends>
            <mal:type name="Composite" area="MAL"/>
          </mal:extends>
          <mal:field name="schItemInstId" canBeNull="false"
                     comment="Reference to the schedule instance associated with this schedule item status.">
            <mal:type name="Long" area="MAL"/>
          </mal:field>
          <mal:field name="status" canBeNull="true"
                     comment="Contains the schedule item status details objects, eg EXECUTE_STARTED.">
            <mal:type list="true" name="StatusRecord" area="PlanningDataTypes"/>
          </mal:field>
        </mal:composite>
	  <!-- ScheduleType -->
      <mal:enumeration name="ScheduleType" shortFormPart="6"
                       comment="The type of schedule: standalone or increment.">
        <mal:item value="STANDALONE" nvalue="1"
                  comment="The standalone schedule."/>
        <mal:item value="INCREMENT_ADD" nvalue="2"
                  comment="Schedule increment, contains the changes to be added to the target schedule. See the documentation for submitScheduleIncrement operation."/>
        <mal:item value="INCREMENT_REMOVE" nvalue="3"
                  comment="Schedule increment, contains the changes to be removed from the target schedule. See the documentation for submitScheduleIncrement operation."/>
      </mal:enumeration>
      </mal:dataTypes>
      <com:features>
        <com:objects comment="The definitions of the schedules shall be represented as ScheduleDefinition COM objects.&#xA;The source link of the ScheduleDefinition object should be the object that caused it to be created, most likely a COM OperationActivity object or an operator login in the case of off-line editors being used.&#xA;Instances of a schedule that are submitted to a provider using the submitSchedule operation shall be represented as ScheduleInstance COM object.&#xA;The object instance identifier for an ScheduleInstance object shall be populated by the consumer.&#xA;The ScheduleInstance object shall use the related link to indicate which ScheduleDefinition object it uses.&#xA;Instances of a schedule that are submitted to a provider using the submitSchedule operation shall link to the submitSchdedule OperationActivity object using the source link.&#xA;The source link of the submitSchedule OperationActivity object should be the object that caused it to be created, most likely an operator login or automated procedure object.">
          <com:object name="ScheduleDefinition" number="1">
            <com:objectType>
              <mal:type name="ScheduleDefinitionDetails" service="Schedule" area="Automation"/>
            </com:objectType>
          </com:object>
          <com:object name="ScheduleInstance" number="2">
            <com:objectType>
              <mal:type name="ScheduleInstanceDetails" service="Schedule" area="Automation"/>
            </com:objectType>
            <com:relatedObject>
              <com:objectType number="1" service="Schedule" area="Automation"/>
            </com:relatedObject>
          </com:object>
          <com:object name="ScheduleStatus" number="3">
            <com:objectType>
              <mal:type name="ScheduleStatusDetails" service="Schedule" area="Automation"/>
            </com:objectType>
            <com:relatedObject>
              <com:objectType number="2" service="Schedule" area="Automation"/>
            </com:relatedObject>
          </com:object>
        </com:objects>
		  <com:events comment="The use of the COM event service is not foreseen in the draft specification of the schedule service.">
        </com:events>
        <com:archiveUsage comment="ScheduleDefinition, ScheduleInstance, and ScheduleStatus objects may be stored in the COM archive by the service provider or service consumer."/>
        <com:activityUsage comment="The COM Activity service usage is optional.&#xA;The COM Activity service can be used to monitor the transfer of the submitSchedule and patchSchedule operation.&#xA;The COM Activity service can be used to monitor the transfer of ScheduleInstance objects."/>
      </com:features>
    </mal:service>
    <mal:service xsi:type="com:ExtendedServiceType" name="Procedure" number="2"
                 comment="The procedure service has three main functions: distribute procedures, invoke and control procedure execution, and report execution feedback.
                 &#xA;A procedure definition is distributed and managed (update, remove) using the addProcedure, getProcedure, updateProcedure, and removeProcedure operations.
                 &#xA;A procedure is started using the invoke operation, which refers to respective procedure definition and takes arguments according to the procedure definition. The progress of procedure invocation may optionally be monitored using the COM activity tracking pattern, which completes when the procedure has been invoked. The use of the COM activity tracking pattern is deployment specific. The usage pattern of the COM activity tracking is similar to the submitAction operation in the M&amp;C Action service.
                 &#xA;The procedure status consists of a set of fields. The fields are related to procedure life cycle states (started, terminated, etc). The procedure life cycle is not part of the specification.
                 &#xA;Consumer may subscribe to the monitoring of procedure invocations. The notifications contain the procedure status objects.">
      <mal:documentation name="High Level Requirements" order="1">The procedure service shall provide:
&lt;ol&gt;
 &lt;li&gt;the capability for listing the numeric identifiers for the procedures;&lt;/li&gt;
 &lt;li&gt;the capability for adding a new procedure;&lt;/li&gt;
 &lt;li&gt;the capability for getting, updating and removing existing procedures;&lt;/li&gt;
 &lt;li&gt;the capability for getting a procedure status;&lt;/li&gt;
 &lt;li&gt;the capability for monitoring procedure status;&lt;/li&gt;
 &lt;li&gt;the capability for invoking and controlling procedure execution.&lt;/li&gt;
&lt;/ol&gt;
        The procedure service may use the COM Activity Tracking service to report the delivery of added procedures.
      </mal:documentation>
<!--       <mal:documentation name="Functional Requirements" order="2"> -->
<!--       </mal:documentation> -->
<!-- 	OPERATIONS -->
      <mal:capabilitySet number="1" comment="List procedure definition">
	  <!-- listProcedure -->
	          <mal:requestIP name="listProcedure" number="1" supportInReplay="true"
                       comment="The listProcedure operation allows a consumer to request the object instance ids of the ProcedureDetails objects for the existing procedures of the provider. The operation is expected to be used in conjunction with the COM archive which holds the actual ProcedureDefinition objects. If the procedure name does not exist the corresponding definition id is not returned and no error is reported.">
          <mal:messages>
            <mal:request>
              <mal:field name="procNames"
                         comment="The procNames field shall contain a list of procedure names to retrieve the ProcedureDefinition object instance identifiers for.&#xA;The request may contain the wildcard value of '*' to return all supported ProcedureDefinition objects.">
                <mal:type list="true" name="Identifier" area="MAL"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="procIds"
                         comment="The response shall contain a list of matching ProcedureDefinition object instance ids.&#xA;The returned list shall maintain the same order as the submitted list unless the wildcard value was included in the request.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:field>
            </mal:response>
          </mal:messages>
        </mal:requestIP>
		<!-- getProcedure -->
        <mal:requestIP name="getProcedure" number="2" supportInReplay="true"
                       comment="The getProcedure operation allows a consumer to request the procedures on the provider. If the id does not exist the corresponding definition object is not returned and no error is reported.">
          <mal:messages>
            <mal:request>
              <mal:field name="procIds" canBeNull="true"
                         comment="The procIds field shall contain a list of procedure ids.&#xA;If null then returns all procedures.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="procDefInst"
                         comment="The response shall contain a list of matching ProcedureDefinition object instances.&#xA;The returned list shall maintain the same order as the submitted list unless defIds={0}in the request.">
                <mal:type list="true" name="ProcedureDetails" service="Procedure" area="Automation"/>
              </mal:field>
            </mal:response>
          </mal:messages>
        </mal:requestIP>
      </mal:capabilitySet>
      <mal:capabilitySet number="2" comment="Add, update, remove procedure definition">
		<!-- addProcedure -->
        <mal:requestIP name="addProcedure" number="3" supportInReplay="false"
                       comment="The addProcedure operation allows a consumer to define procedures that do not currently exist. The new ProcedureDefinition object is expected to be stored in the COM archive by the provider of the procedure service.">
          <mal:messages>
            <mal:request>
              <mal:field name="procDetails"
                         comment="The procDetails field shall hold the list of procedures to be added.&#xA;The name field of the supplied ProcedureDetails structures must not be NULL, the wildcard '*', or empty (an INVALID error shall be returned in this case).&#xA;The supplied name must be unique among all ProcedureDefinition objects for the domain of the provider otherwise a DUPLICATE error shall be raised.&#xA;If an error is raised then no new definitions shall be added as a result of this operation call.">
                <mal:type list="true" name="ProcedureDetails" service="Procedure" area="Automation"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="procIds"
                         comment="The response shall contain the list of object instance ids for the new procedures.&#xA;The returned list shall maintain the same order as the submitted procedures.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:field>
            </mal:response>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One of the supplied procedures contains an invalid procedure name.">
              <mal:type name="INVALID" area="COM"/>
              <mal:extraInformation comment="The extra information field contains a list of erroneous ids from the originating list supplied.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="One or more of the procedure definitions being added has supplied a procedure name that is already in use in the domain.">
              <mal:type name="DUPLICATE" area="COM"/>
              <mal:extraInformation comment="The extra information field contains a list of erroneous ids from the originating list supplied.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:requestIP>
		<!-- updateProcedure -->
        <mal:submitIP name="updateProcedure" number="4" supportInReplay="false"
                      comment="The updateProcedure operation allows a consumer to modify a procedure without needing to delete the existing procedure first.">
          <mal:messages>
            <mal:submit>
              <mal:field name="procDetails"
                         comment="The procDetails field shall contain the list of replacement details for the matched ProcedureDefinition objects. The id of definition is in procDetails.&#xA;If an error is raised then no procedures shall be modified as a result of this operation call.">
                <mal:type list="true" name="ProcedureDetails" service="Procedure" area="Automation"/>
              </mal:field>
            </mal:submit>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One of the supplied procedure definitions is trying to change its procedure definition name or id.">
              <mal:type name="INVALID" area="COM"/>
              <mal:extraInformation comment="The extra information field contains a list of erroneous ids from the originating list supplied.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:extraInformation>
            </mal:errorRef>
            <mal:errorRef comment="One of the supplied ProcedureDefinition object instance ids is unknown.">
              <mal:type name="UNKNOWN" area="MAL"/>
              <mal:extraInformation comment="The extra information field contains a list of erroneous ids from the originating list supplied.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:submitIP>
		<!-- removeProcedure -->
        <mal:submitIP name="removeProcedure" number="5" supportInReplay="false"
                      comment="The removeProcedure operation allows a consumer to remove one or more procedures from provider.&#xA;The operation does not remove the ProcedureDefinition object from the COM archive, merely removes the object from the provider. This permits active, and completed, ProcedureInvocations continue to reference the correct ProcedureDefinition object in the COM archive.">
          <mal:messages>
            <mal:submit>
              <mal:field name="procIds"
                         comment="The procIds field holds the list of ProcedureDefinition object instance identifiers of the procedures to be removed from the provider.&#xA;The wildcard value of '0' in the list of object instance identifiers shall be supported and matches all definitions of the provider.&#xA;If a provided definition object instance identifier does not include a wildcard and does not match an existing procedure then this operation shall fail with an UNKNOWN error.&#xA;If a matched definition is still being used by an active procedure instance then this operation shall not fail because of this reason.&#xA;Removed definitions still exist in the COM archive but shall not be allowed to be referenced by new procedure instances.&#xA;If an error is raised then no procedures shall be removed as a result of this operation call.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:field>
            </mal:submit>
          </mal:messages>
          <mal:errors>
            <mal:errorRef comment="One of the supplied ProcedureDefinition object instance ids is unknown.">
              <mal:type name="UNKNOWN" area="MAL"/>
              <mal:extraInformation comment="The extra information field contains a list of erroneous ids from the originating list supplied.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:extraInformation>
            </mal:errorRef>
          </mal:errors>
        </mal:submitIP>
      </mal:capabilitySet>
<!-- control -->
      <mal:capabilitySet number="3" comment="Control procedure execution">
	  <!-- invoke -->
      <mal:requestIP name="invoke" number="6" supportInReplay="false"
                      comment="Invokes procedure execution.">
          <mal:messages>
            <mal:request>
              <mal:field name="procInvocDetails"
                         comment="The procInvocDetails field of the submission shall contain the procedure invocation arguments.">
                <mal:type list="true" name="ProcedureInvocationDetails" service="Procedure" area="Automation"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="procStatus"
                         comment="The operation shall return a ProcedureStatusDetails object. If id does not exist, then use the INVALID status constant. Other possible statuses: EXECUTE_STARTED, EXECUTE_START_FAILED.">
                <mal:type list="true" name="ProcedureStatusDetails" service="Procedure" area="Automation"/>
              </mal:field>
            </mal:response>
          </mal:messages>
        </mal:requestIP>
	  <!-- pause -->
      <mal:requestIP name="pause" number="7" supportInReplay="false"
                      comment="The pause operation allows a consumer to pause an executing procedure.">
          <mal:messages>
            <mal:request>
              <mal:field name="procInvocIds"
                         comment="The procInvocIds field of the submission shall contain a MAL::Long that is the object instance identifier of the procedure invocation to be paused.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="procStatus"
                         comment="The operation shall return a ProcedureStatusDetails object.  If id does not exist, then use the INVALID status constant. Other possible statuses: EXECUTE_PAUSED,EXECUTE_PAUSE_FAILED.">
                <mal:type list="true" name="ProcedureStatusDetails" service="Procedure" area="Automation"/>
              </mal:field>
            </mal:response>
          </mal:messages>
        </mal:requestIP>
	  <!-- resume -->
      <mal:requestIP name="resume" number="8" supportInReplay="false"
                      comment="The resume operation allows a consumer to resume a paused procedure.">
          <mal:messages>
            <mal:request>
              <mal:field name="procInvocIds"
                         comment="The procInvocIds field of the submission shall contain a MAL::Long that is the object instance identifier of the procedure invocation to be resumed.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="procStatus"
                         comment="The operation shall return a ProcedureStatusDetails object. If id does not exist, then use the INVALID status constant. Other possible statuses: EXECUTE_RESUMED, EXECUTE_RESUME_FAILED.">
                <mal:type list="true" name="ProcedureStatusDetails" service="Procedure" area="Automation"/>
              </mal:field>
            </mal:response>
          </mal:messages>
        </mal:requestIP>
	  <!-- terminate -->
      <mal:requestIP name="terminate" number="9" supportInReplay="false"
                      comment="The terminate operation allows a consumer to terminate a running or paused procedure.">
          <mal:messages>
            <mal:request>
              <mal:field name="procInvocIds"
                         comment="The procInvocIds field of the submission shall contain a MAL::Long that is the object instance identifier of the procedure invocation to be terminated.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="procStatus"
                         comment="The operation shall return a ProcedureStatusDetails object. If id does not exist, then use the INVALID status constant. Other possible statuses: EXECUTE_TERMINATED, EXECUTE_TERMINATE_FAILED.">
                <mal:type list="true" name="ProcedureStatusDetails" service="Procedure" area="Automation"/>
              </mal:field>
            </mal:response>
          </mal:messages>
        </mal:requestIP>
      </mal:capabilitySet>
<!-- getstatus, monitor -->
      <mal:capabilitySet number="4" comment="Get procedure status">
	  <!-- getProcedureStatus -->
        <mal:requestIP name="getProcedureStatus" number="10" supportInReplay="true"
                       comment="The getProcedureStatus operation allows a consumer to get the status of procedure invocations.">
          <mal:messages>
            <mal:request>
              <mal:field name="procInvocIds"
                         comment="The procInvocIds field shall contain a list of procedure ids to retrieve the procedure statuses for.&#xA;The request may contain the wildcard value of '0' to return statuses for all procedures.">
                <mal:type list="true" name="Long" area="MAL"/>
              </mal:field>
            </mal:request>
            <mal:response>
              <mal:field name="procStatus"
                         comment="The operation shall return ProcedureStatusDetails objects. The order of the procedure status objects corresponds to the order of the submitted procedure instance ids. If a procedure instance id does not exist, then the corresponding procedure status object is null.">
                <mal:type list="true" name="ProcedureStatusDetails" service="Procedure" area="Automation"/>
              </mal:field>
            </mal:response>
          </mal:messages>
        </mal:requestIP>
      </mal:capabilitySet>
      <mal:capabilitySet number="5" comment="Monitor procedure status">
	  <!-- monitorProcedures -->
		<mal:pubsubIP name="monitorProcedures" number="11" supportInReplay="true"
                      comment="The monitorProcedures operation allows a consumer to subscribe for procedure status updates.&#xA;How to specify the procedure ids that we wish to monitor? This problem is not solved in this specification. The problem is similar to the MC Parameter service. In MC Parameter service there is a general monitorValue operation, that takes no arguments. A related enableGeneration operation specifies the instance ids or groups of instances for which the updates are generated. Alternatively, there is a generationEnabled field in ParameterDefinitionDetails.&#xA;The notifications contain the schedule status objects. The amount of information in the status objects is defined by deployments. For example, some system may send the current state constant of a procedure (eg EXECUTED), others may send multiple constants with associated time-stamps (eg SUBMITTED, LAST_MODIFIED, EXECUTED).">
          <mal:messages>
            <mal:publishNotify>
              <mal:field name="objId"
                         comment="The MAL EntityKey.firstSubKey shall contain the procedure name.&#xA;The MAL EntityKey.secondSubKey shall contain the ProcedureDefinition object instance identifier.&#xA;The MAL EntityKey.thirdSubKey shall contain the ProcedureInvocation object instance identifier.&#xA;The MAL EntityKey.fourthSubKey shall be NULL.&#xA;The timestamp of the ProcedureInvocation update shall be taken from the publish message.&#xA;The publish message shall include the ObjectId of the source link of the update.&#xA;If no source link is needed then the ObjectId shall be replaced with a NULL.">
                <mal:type name="ObjectId" area="COM"/>
              </mal:field>
              <mal:field name="status"
                         comment="The second part of the publish message shall be the ProcedureInvocation object value.">
                <mal:type name="ProcedureStatusDetails" service="Procedure" area="Automation"/>
              </mal:field>
            </mal:publishNotify>
          </mal:messages>
        </mal:pubsubIP>
      </mal:capabilitySet>
<!-- 	DATA TYPES -->
      <mal:dataTypes>
		<!-- ProcedureDetails -->
        <mal:composite name="ProcedureDetails" shortFormPart="1"
                       comment="The procedure definition is the signature and the body of a Procedure. It is the static definition of a procedure.">
          <mal:extends>
            <mal:type name="Composite" area="MAL"/>
          </mal:extends>
          <mal:field name="id" canBeNull="false"
                     comment="The unique id of the procedure. This id is also used by the COM Archive.">
            <mal:type name="Long" area="MAL"/>
          </mal:field>
          <mal:field name="name" canBeNull="false"
                     comment="The unique name of the procedure definition. Must not be empty or the wildcard value.">
            <mal:type name="Identifier" area="MAL"/>
          </mal:field>
          <mal:field name="content" canBeNull="false"
                     comment="Procedure signature and body. Potentially the data type may be changed to a byte array.">
            <mal:type name="String" area="MAL"/>
          </mal:field>
          <mal:field name="argumentDefs" canBeNull="true"
                     comment="The argument definitions. The argument definitions specify the type of arguments.">
            <mal:type list="true" name="ArgumentDefinitionDetails" area="PlanningDataTypes"/>
          </mal:field>
        </mal:composite>
		<!-- ProcedureInvocationDetails -->
        <mal:composite name="ProcedureInvocationDetails" shortFormPart="2"
                       comment="The procedure invocation contains the invocation details of a procedure, which is the argument values according to the procedure definition.">
          <mal:extends>
            <mal:type name="Composite" area="MAL"/>
          </mal:extends>
          <mal:field name="id" canBeNull="false"
                     comment="The unique id of the procedure invocation.">
            <mal:type name="Long" area="MAL"/>
          </mal:field>
          <mal:field name="procId" canBeNull="false"
                     comment="Reference to the procedure definition.">
            <mal:type name="Long" area="MAL"/>
          </mal:field>
          <mal:field name="argumentValues" canBeNull="true"
                     comment="The argument values. The arguments are in the order of argument definitions in the procedure definition object.">
            <mal:type list="true" name="ArgumentValue" area="PlanningDataTypes"/>
          </mal:field>
        </mal:composite>
		<!-- ProcedureStatusDetails -->
        <mal:composite name="ProcedureStatusDetails" shortFormPart="4"
                       comment="The ProcedureStatusDetails structure holds the information related to the procedure status.">
          <mal:extends>
            <mal:type name="Composite" area="MAL"/>
          </mal:extends>
          <mal:field name="procInvocId" canBeNull="false"
                     comment="The id of the procedure invocation associated with this procedure invocation status.">
            <mal:type name="Long" area="MAL"/>
          </mal:field>
          <mal:field name="status" canBeNull="true"
                     comment="Contains the procedure status details objects, eg EXECUTE_STARTED.">
            <mal:type list="true" name="StatusRecord" area="PlanningDataTypes"/>
          </mal:field>
        </mal:composite>
      </mal:dataTypes>
      <com:features>
        <com:objects comment="The definitions of the procedures shall be represented as Procedure COM objects.&#xA;The source link of the Procedure object should be the object that caused it to be created, most likely a COM OperationActivity object or an operator login in the case of off-line editors being used.&#xA;Invocations of a procedure that are invoked on a provider using the invoke operation shall be represented as ProcedureInvocation COM object.&#xA;The object instance identifier for an ProcedureInvocation object shall be populated by the consumer.&#xA;The ProcedureInvocation object shall use the related link to indicate which Procedure object it uses.&#xA;Instances of a procedure that are submitted to a provider using the invoke operation shall link to the invoke OperationActivity object using the source link.&#xA;The source link of the invoke OperationActivity object should be the object that caused it to be created, most likely an operator login.">
          <com:object name="Procedure" number="1">
            <com:objectType>
              <mal:type name="ProcedureDetails" service="Procedure" area="Automation"/>
            </com:objectType>
          </com:object>
          <com:object name="ProcedureInvocation" number="2">
            <com:objectType>
              <mal:type name="ProcedureInvocationDetails" service="Procedure" area="Automation"/>
            </com:objectType>
            <com:relatedObject>
              <com:objectType number="1" service="Procedure" area="Automation"/>
            </com:relatedObject>
          </com:object>
          <com:object name="ProcedureStatus" number="3">
            <com:objectType>
              <mal:type name="ProcedureStatusDetails" service="Procedure" area="Automation"/>
            </com:objectType>
            <com:relatedObject>
              <com:objectType number="2" service="Procedure" area="Automation"/>
            </com:relatedObject>
          </com:object>
        </com:objects>
		  <com:events comment="The use of the COM event service is not foreseen in the draft specification of the procedure service.">
        </com:events>
        <com:archiveUsage comment="ProcedureDefinition, ProcedureInvocation, and ProcedureStatus objects may be stored in the COM archive by the service provider or service consumer."/>
        <com:activityUsage comment="The COM Activity service usage is optional.&#xA;The COM Activity service can be used to monitor the transfer of the invoke operation.&#xA;"/>
      </com:features>
	</mal:service>
  </mal:area>
</mal:specification>